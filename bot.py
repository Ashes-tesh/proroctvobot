import os
import random
import logging
import telebot
from telebot.types import Message, MessageEntity
from flask import Flask

# –°—Ç–≤–æ—Ä—é—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫
app = Flask(__name__)

@app.route('/')
def home():
    return "üîÆ Telegram Prediction Bot is running!", 200

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

PHRASES_FILE = "phrases.txt"
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))

def load_phrases():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ—Ä–∞–∑–∏ –∑ —Ñ–∞–π–ª—É, —Å—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î"""
    if not os.path.exists(PHRASES_FILE):
        default_phrases = [
        ]
        with open(PHRASES_FILE, "w", encoding="utf-8") as f:
            f.write("\n".join(default_phrases))
    
    with open(PHRASES_FILE, "r", encoding="utf-8") as f:
        return [line.strip() for line in f.readlines() if line.strip()]

@bot.message_handler(commands=['start'])
def start(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    bot.reply_to(message, "üîÆ –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–ø—Ä–æ—Ä–æ–∫. –ü—Ä–æ—Å—Ç–æ —Ç–µ–≥–Ω–∏ –º–µ–Ω–µ —É —á–∞—Ç—ñ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")

@bot.message_handler(commands=['addphrase'])
def add_phrase(message: Message):
    """–î–æ–¥–∞—î –Ω–æ–≤—É —Ñ—Ä–∞–∑—É —É —Ñ–∞–π–ª"""
    if not message.text or len(message.text.split()) < 2:
        bot.reply_to(message, "‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addphrase [—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ä–æ—Ü—Ç–≤–∞]")
        return
        
    new_phrase = " ".join(message.text.split()[1:]).strip()
    
    with open(PHRASES_FILE, "a", encoding="utf-8") as f:
        f.write("\n" + new_phrase)
    
    bot.reply_to(message, f"‚úÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–µ –ø—Ä–æ—Ä–æ—Ü—Ç–≤–æ: ¬´{new_phrase}¬ª")

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message: Message):
    """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —à—É–∫–∞—é—á–∏ –∑–≥–∞–¥–∫–∏ –±–æ—Ç–∞"""
    try:
        if not message.text:
            return
            
        bot_username = bot.get_me().username.lower()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–≥–∞–¥–∫–∏ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
        if message.entities:
            for entity in message.entities:
                if entity.type == "mention":
                    mentioned_text = message.text[entity.offset:entity.offset + entity.length].lower()
                    
                    if mentioned_text == f"@{bot_username}":
                        phrases = load_phrases()
                        if not phrases:
                            bot.reply_to(message, "‚ö†Ô∏è –§—Ä–∞–∑–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ! –ê–¥–º—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –¥–æ–¥–∞—Ç–∏ —ó—Ö —É phrases.txt")
                            return
                        
                        chosen_phrase = random.choice(phrases)
                        username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
                        response = f"–ü—Ä–æ—Ä–æ—Ü—Ç–≤–æ –¥–ª—è {username}:\n\n¬´{chosen_phrase}¬ª"
                        bot.reply_to(message, response)
                        return
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

def run_flask():
    """–ó–∞–ø—É—Å–∫–∞—î Flask —Å–µ—Ä–≤–µ—Ä"""
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

if __name__ == "__main__":
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –∑ —Ñ—Ä–∞–∑–∞–º–∏ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
    if not os.path.exists(PHRASES_FILE):
        load_phrases()
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    import threading
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    logger.info("üîÆ –ë–æ—Ç-–ø—Ä–æ—Ä–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ! –ù–∞–ø–∏—à–∏ /start —â–æ–± –ø–æ—á–∞—Ç–∏")
    logger.info("üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ %s", os.environ.get('PORT', 8080))
    bot.infinity_polling()

