import os
import random
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

PHRASES_FILE = "phrases.txt"

def load_phrases():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ—Ä–∞–∑–∏ –∑ —Ñ–∞–π–ª—É, —Å—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î"""
    if not os.path.exists(PHRASES_FILE):
        default_phrases = [
            "–ù—ñ–∫–æ–º—É –≤ —á–∞—Ç—ñ –Ω–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –∑ —Ç–æ–±–æ—é —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è"
        ]
        with open(PHRASES_FILE, "w", encoding="utf-8") as f:
            f.write("\n".join(default_phrases))
    
    with open(PHRASES_FILE, "r", encoding="utf-8") as f:
        return [line.strip() for line in f.readlines() if line.strip()]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    await update.message.reply_text("üîÆ –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–ø—Ä–æ—Ä–æ–∫. –ü—Ä–æ—Å—Ç–æ —Ç–µ–≥–Ω–∏ –º–µ–Ω–µ —É —á–∞—Ç—ñ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ—Ä–æ—Ü—Ç–≤–æ")

async def add_phrase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–¥–∞—î –Ω–æ–≤—É —Ñ—Ä–∞–∑—É —É —Ñ–∞–π–ª"""
    new_phrase = " ".join(context.args).strip()
    
    if not new_phrase:
        await update.message.reply_text("‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addphrase [—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ä–æ—Ü—Ç–≤–∞]")
        return
    
    with open(PHRASES_FILE, "a", encoding="utf-8") as f:
        f.write("\n" + new_phrase)
    
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–µ –ø—Ä–æ—Ä–æ—Ü—Ç–≤–æ: ¬´{new_phrase}¬ª")

async def handle_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –∑–≥–∞–¥–∫—É –±–æ—Ç–∞ –Ω–∞–≤—ñ—Ç—å –Ω–µ–ø–æ–≤–Ω—É"""
    message = update.message
    if not message or not message.text:
        return

    bot_username = (await context.bot.get_me()).username.lower()
    text_lower = message.text.lower()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤–Ω–æ–≥–æ —Ç–∞ —á–∞—Å—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–≥–∞
    if f"@{bot_username}" in text_lower or text_lower.startswith(f"@{bot_username[:3]}"):
        phrases = load_phrases()
        if not phrases:
            await message.reply_text("‚ö†Ô∏è –§—Ä–∞–∑–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ! –ê–¥–º—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –¥–æ–¥–∞—Ç–∏ —ó—Ö —É phrases.txt")
            return
        
        chosen_phrase = random.choice(phrases)
        user = message.from_user
        username = f"@{user.username}" if user.username else user.first_name
        response = f"–ü—Ä–æ—Ä–æ—Ü—Ç–≤–æ –¥–ª—è {username}:\n\n¬´{chosen_phrase}¬ª"
        await message.reply_text(response)

if __name__ == "__main__":
    if not os.path.exists(PHRASES_FILE):
        load_phrases()

    TOKEN = os.getenv("BOT_TOKEN") or "8247991767:AAEanpHubh2T-WZziZywInqJwo5XS6oBGUc"

    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addphrase", add_phrase))

    # –û–±—Ä–æ–±–Ω–∏–∫ –∑–≥–∞–¥–æ–∫ —Ç–∞ —Ç–µ–∫—Å—Ç—É
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_mention))

    print("üîÆ –ë–æ—Ç-–ø—Ä–æ—Ä–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ! –ù–∞–ø–∏—à–∏ /start —â–æ–± –ø–æ—á–∞—Ç–∏")
    app.run_polling()