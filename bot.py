import os
import random
import logging
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(name)  # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: name –∑–∞–º—ñ—Å—Ç—å name

PHRASES_FILE = "phrases.txt"

def load_phrases():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ—Ä–∞–∑–∏ –∑ —Ñ–∞–π–ª—É, —Å—Ç–≤–æ—Ä—é—î —Ñ–∞–π–ª –∑ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º–∏ —Ñ—Ä–∞–∑–∞–º–∏ —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î"""
    if not os.path.exists(PHRASES_FILE):
        default_phrases = [
        ]
        with open(PHRASES_FILE, "w", encoding="utf-8") as f:
            f.write("\n".join(default_phrases))
    
    with open(PHRASES_FILE, "r", encoding="utf-8") as f:
        return [line.strip() for line in f.readlines() if line.strip()]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    await update.message.reply_text("üîÆ –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–ø—Ä–æ—Ä–æ–∫. –ü—Ä–æ—Å—Ç–æ —Ç–µ–≥–Ω–∏ –º–µ–Ω–µ —É —á–∞—Ç—ñ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")

async def add_phrase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–¥–∞—î –Ω–æ–≤—É —Ñ—Ä–∞–∑—É —É —Ñ–∞–π–ª"""
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addphrase [—Ç–µ–∫—Å—Ç –ø—Ä–æ—Ä–æ—Ü—Ç–≤–∞]")
        return
        
    new_phrase = " ".join(context.args).strip()
    
    with open(PHRASES_FILE, "a", encoding="utf-8") as f:
        f.write("\n" + new_phrase)
    
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–µ –ø—Ä–æ—Ä–æ—Ü—Ç–≤–æ: ¬´{new_phrase}¬ª")

async def handle_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ —Ç–µ–≥ —É —á–∞—Ç—ñ"""
    try:
        message = update.message
        if not message or not message.text:
            return
            
        user = message.from_user
        bot = await context.bot.get_me()
        bot_username = bot.username.lower()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–≥–∞–¥–∫–∏ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
        for entity in message.entities:
            if entity.type == "mention":
                mentioned_text = message.text[entity.offset:entity.offset + entity.length].lower()
                
                if mentioned_text == f"@{bot_username}":
                    phrases = load_phrases()
                    if not phrases:
                        await message.reply_text("‚ö†Ô∏è –§—Ä–∞–∑–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ! –ê–¥–º—ñ–Ω –ø–æ–≤–∏–Ω–µ–Ω –¥–æ–¥–∞—Ç–∏ —ó—Ö —É phrases.txt")
                        return
                    
                    chosen_phrase = random.choice(phrases)
                    username = f"@{user.username}" if user.username else user.first_name
                    response = f"–ü—Ä–æ—Ä–æ—Ü—Ç–≤–æ –¥–ª—è {username}:\n\n¬´{chosen_phrase}¬ª"
                    await message.reply_text(response)
                    return
                    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–≥–∞–¥–∫–∏: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    TOKEN = os.getenv("BOT_TOKEN")
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN")
        return
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ Application
        application = Application.builder().token(TOKEN).build()
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("addphrase", add_phrase))
        
        # –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–≥—ñ–≤ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö
        application.add_handler(MessageHandler(
            filters.TEXT & filters.Entity("mention"),
handle_mention
        ))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üîÆ –ë–æ—Ç-–ø—Ä–æ—Ä–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ! –ù–∞–ø–∏—à–∏ /start —â–æ–± –ø–æ—á–∞—Ç–∏")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")

if name == "main":
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª –∑ —Ñ—Ä–∞–∑–∞–º–∏ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
    if not os.path.exists(PHRASES_FILE):
        load_phrases()
    main()
